source('C:/Users/juraj/git_hub/categoryEncodings/R/datatable_encodings.R')
see <- encode_mean(design_mat, "factor_var")
source('C:/Users/juraj/git_hub/categoryEncodings/R/datatable_encodings.R')
encode_lowrank(design_mat, 6)
source('C:/Users/juraj/git_hub/categoryEncodings/R/datatable_encodings.R')
encode_lowrank(design_mat, 6)
source('C:/Users/juraj/git_hub/categoryEncodings/R/datatable_encodings.R')
encode_lowrank(design_mat, 6)
see <- encode_lowrank(design_mat, 6)
View(see)
source('C:/Users/juraj/git_hub/categoryEncodings/R/datatable_encodings.R')
source('C:/Users/juraj/git_hub/categoryEncodings/tests/testthat/test-encodings.R')
usethis::use_package("data.table")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
encode_deviation <- function(X, fact, keep_factor = FALSE){
if(is.numeric(fact)){
fact <- colnames(X)[fact]
}
X <- data.table::data.table(X)
fact_levs <- levels(X[,which(colnames(X) == fact )])
reference <- rep(-1, length(fact_levs)-1)
dummies <- data.frame(rbind(reference, diag(length(fact_levs)-1)))
colnames(dummies) <- paste(fact_levs[1:length(fact_levs)-1],
"_deviate" , sep = "")
rownames(dummies) <- NULL
factor_var <- fact_levs
dummy_mat <- cbind(factor_var, dummies )
X <- X[dummy_mat, on = fact]
if(keep_factor == FALSE){
X[,(fact) := NULL]
}
return(X)
}
encode_deviation(design_mat, 6)
encode_deviation <- function(X, fact, keep_factor = FALSE){
if(is.numeric(fact)){
fact <- colnames(X)[fact]
}
X <- data.table::data.table(X)
fact_levs <- levels(X[,which(colnames(X) == fact )])
return(fact_levs)
reference <- rep(-1, length(fact_levs)-1)
dummies <- data.frame(rbind(reference, diag(length(fact_levs)-1)))
colnames(dummies) <- paste(fact_levs[1:length(fact_levs)-1],
"_deviate" , sep = "")
rownames(dummies) <- NULL
factor_var <- fact_levs
dummy_mat <- cbind(factor_var, dummies )
X <- X[dummy_mat, on = fact]
if(keep_factor == FALSE){
X[,(fact) := NULL]
}
return(X)
}
encode_deviation(design_mat, 6)
source('C:/Users/juraj/git_hub/categoryEncodings/R/datatable_encodings.R')
encode_deviation(design_mat, 6)
Y <- encode_deviation(design_mat, 6)
levels(Y[,colnames(Y) == "factor_var"])
levels(Y[,colnames(Y) = "factor_var"])
levels(Y[,which(colnames(Y) == "factor_var")])
devtools::check()
devtools::check()
devtools::check()
encode_mnl <- function(X, fact, keep_factor = FALSE){
if(is.numeric(fact)){
fact <- colnames(X)[fact]
}
reference <- matrix(rep(0,ncol(X)), nrow = 1)
X <- data.table::data.table(X)
mnl <- data.frame( rbind( reference,
coef( nnet::multinom( formula = formula(
paste(fact,"~.", sep = "")),
data = as.data.frame(X)) ) ))
colnames(mnl) <- paste( c("intercept",
colnames(X)[which(colnames(X) != fact)]),
"_mnl", sep = "")
factor_var <- rownames(mnl)
mnl <- cbind(factor_var,mnl)
rownames(mnl) <- NULL
X <- X[mnl, on = fact]
if(keep_factor == FALSE){
X[,(fact) := NULL]
}
return(X)
}
test <- encode_mnl(design_mat, 6)
View(test)
encode_mnl <- function(X, fact, keep_factor = FALSE){
if(is.numeric(fact)){
fact <- colnames(X)[fact]
}
reference <- matrix(rep(0,ncol(X)), nrow = 1)
X <- data.table::data.table(X)
mnl <- data.frame( rbind( reference,
coef( nnet::multinom( formula = formula(
paste(fact,"~.", sep = "")),
data = as.data.frame(X)) ) ))
colnames(mnl) <- paste( c("intercept",
colnames(X)[which(colnames(X) != fact)]),
"_mnl", sep = "")
factor_var <- rownames(mnl)
mnl <- cbind(factor_var,mnl)
rownames(mnl) <- NULL
return(mnl)
X <- X[mnl, on = fact]
if(keep_factor == FALSE){
X[,(fact) := NULL]
}
return(X)
}
View(test)
test <- encode_mnl(design_mat, 6)
View(test)
reference <- matrix(rep(0,6), nrow = 1)
rownames(reference) <- levels(design_mat[,6])[1]
mnl <- data.frame( rbind( reference,
coef( nnet::multinom( formula = factor_var~.,
data = design_mat) ) ))
colnames(mnl) <- paste(c("intercept",colnames(design_mat[,1:5]) ),"_mnl")
factor_var <- rownames(mnl)
mnl <- cbind(factor_var,mnl)
rownames(mnl) <- NULL
res <- dplyr::left_join(design_mat, mnl, by = "factor_var") %>%
dplyr::select(-factor_var)
library(magrittr)
reference <- matrix(rep(0,6), nrow = 1)
rownames(reference) <- levels(design_mat[,6])[1]
mnl <- data.frame( rbind( reference,
coef( nnet::multinom( formula = factor_var~.,
data = design_mat) ) ))
colnames(mnl) <- paste(c("intercept",colnames(design_mat[,1:5]) ),"_mnl")
factor_var <- rownames(mnl)
mnl <- cbind(factor_var,mnl)
rownames(mnl) <- NULL
res <- dplyr::left_join(design_mat, mnl, by = "factor_var") %>%
dplyr::select(-factor_var)
View(res)
View(test)
source('C:/Users/juraj/git_hub/categoryEncodings/R/datatable_encodings.R')
source('C:/Users/juraj/git_hub/categoryEncodings/R/datatable_encodings.R')
test <- encode_mnl(design_mat, 6)
source('C:/Users/juraj/git_hub/categoryEncodings/R/datatable_encodings.R')
test <- encode_mnl(design_mat, 6)
source('C:/Users/juraj/git_hub/categoryEncodings/R/datatable_encodings.R')
test <- encode_mnl(design_mat, 6)
View(test)
test[,"factor_var"]
levels(test[,"factor_var"])
levels(unlist(test[,"factor_var"]))
design_mat[,"factor_var"]
design_mat[,6]
source('C:/Users/juraj/git_hub/categoryEncodings/R/datatable_encodings.R')
test <- encode_mnl(design_mat, 6)
source('C:/Users/juraj/git_hub/categoryEncodings/R/datatable_encodings.R')
test <- encode_mnl(design_mat, 6)
source('C:/Users/juraj/git_hub/categoryEncodings/R/datatable_encodings.R')
test <- encode_mnl(design_mat, 6)
source('C:/Users/juraj/git_hub/categoryEncodings/R/datatable_encodings.R')
test <- encode_mnl(design_mat, 6)
View(test)
source('C:/Users/juraj/git_hub/categoryEncodings/R/datatable_encodings.R')
test <- encode_mnl(design_mat, 6)
View(test)
devtools::check()
devtools::check()
source('C:/Users/juraj/git_hub/categoryEncodings/R/datatable_encodings.R')
devtools::check()
devtools::check()
devtools::check()
?usethis::use_badge()
?usethis::use_lifecycle_badge()
usethis::use_lifecycle_badge()
usethis::use_lifecycle_badge("experimental")
usethis::use_cran_badge()
devtools::document()
warnings()
invisible(cat("Hi\n"))
cat(Hi)
cat("Hi")
source('C:/Users/juraj/git_hub/categoryEncodings/R/encodings.R')
source('C:/Users/juraj/git_hub/categoryEncodings/R/encodings.R')
encode_SPCA(design_mat, 6)
?sink()
?invisible
?silent
encode_lowrank(design_mat, 6)
encode_mnl(design_mat, 6)
?nnet::multinom()
source('C:/Users/juraj/git_hub/categoryEncodings/R/encodings.R')
encode_mnl(design_mat, 6)
?sink
source('C:/Users/juraj/git_hub/categoryEncodings/R/encodings.R')
encode_mnl(design_mat, 6)
res <- encode_mnl(design_mat, 6)
source('C:/Users/juraj/git_hub/categoryEncodings/R/encodings.R')
res <- encode_mnl(design_mat, 6)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::test()
levels(as.factor(as.character(design_mat[,6])))
levels(as.factor(as.character(design_mat[,5])))
is_likely_factor <- function(datafm){
res <- lapply(datafm, FUN = function(i){
total_levels <- levels(as.factor(as.character(i)))
total_length <- length(unlist(i))
ratio_of_unique_values <- (total_length - total_levels)/(total_length)
if(ratio_of_unique_values > 0.2){
return(TRUE)
}
else{
return(FALSE)
}
})
return(res)
}
is_likely_factor(design_mat)
is_likely_factor <- function(datafm){
res <- lapply(datafm, FUN = function(i){
total_levels <- levels(as.factor(as.character(i)))
total_length <- length(unlist(i))
ratio_of_unique_values <- (total_length - length(total_levels))/(total_length)
if(ratio_of_unique_values > 0.2){
return(TRUE)
}
else{
return(FALSE)
}
})
return(res)
}
is_likely_factor(design_mat)
is_likely_factor <- function(datafm){
res <- lapply(datafm, FUN = function(i){
total_levels <- levels(as.factor(as.character(i)))
total_length <- length(unlist(i))
ratio_of_unique_values <- (total_length - length(total_levels))/(total_length)
if(ratio_of_unique_values > 0.9){
return(TRUE)
}
else{
return(FALSE)
}
})
return(res)
}
is_likely_factor(design_mat)
is_likely_factor <- function(datafm){
res <- lapply(datafm, FUN = function(i){
total_levels <- levels(as.factor(as.character(i)))
total_length <- length(unlist(i))
ratio_of_unique_values <- (total_length - length(total_levels))/(total_length)
if(ratio_of_unique_values > 0.8){
return(TRUE)
}
else{
return(FALSE)
}
})
return(res)
}
is_likely_factor(design_mat)
is_likely_factor <- function(datafm)
{
res <- lapply(datafm, FUN = function(i){
total_levels <- levels(as.factor(as.character(i)))
total_length <- length(unlist(i))
ratio_of_unique_values <- (total_length - length(total_levels))/(total_length)
if(ratio_of_unique_values > 0.2){
return(TRUE)
}
else{
return(FALSE)
}
})
return(res)
}
is_likely_factor(design_mat)
is_likely_factor <- function(datafm)
{
res <- lapply(datafm, FUN = function(i){
total_levels <- levels(as.factor(as.character(i)))
total_length <- length(unlist(i))
ratio_of_unique_values <- (total_length - length(total_levels))/(total_length)
if(ratio_of_unique_values > 0.05){
return(TRUE)
}
else{
return(FALSE)
}
})
return(res)
}
is_likely_factor(design_mat)
is_likely_factor <- function(datafm)
{
res <- lapply(datafm, FUN = function(i){
total_levels <- levels(as.factor(as.character(i)))
total_length <- length(unlist(i))
ratio_of_unique_values <- (total_length - length(total_levels))/(total_length)
if(ratio_of_unique_values > 0.2){
return(TRUE)
}
else{
return(FALSE)
}
})
return(res)
}
is_likely_factor(design_mat)
design_mat <- cbind( data.frame(matrix(rnorm(5*100),ncol = 5)),
sample(sample(letters, 90), 100, replace = TRUE))
colnames(design_mat)[6] <- "factor_var"
design_mat <- cbind( data.frame(matrix(rnorm(5*100),ncol = 5)),
sample(sample(letters, 90, TRUE), 100, replace = TRUE))
colnames(design_mat)[6] <- "factor_var"
is_likely_factor(design_mat)
is_likely_factor <- function(datafm)
{
res <- lapply(datafm, FUN = function(i){
total_levels <- levels(as.factor(as.character(i)))
total_length <- length(unlist(i))
ratio_of_unique_values <- (total_length - length(total_levels))/(total_length)
if(ratio_of_unique_values > 0.2){
return(TRUE)
}
else{
return(FALSE)
}
})
return(unlist(res))
}
is_likely_factor(design_mat)
is_likely_factor(design_mat) == TRUE
which(is_likely_factor(design_mat) == TRUE)
names(which(is_likely_factor(design_mat) == TRUE))
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(X, method = "means")
is_likely_factor <- function(datafm)
{
res <- lapply(datafm, FUN = function(i){
total_levels <- levels(as.factor(as.character(i)))
total_length <- length(unlist(i))
ratio_of_unique_values <- (total_length - length(total_levels))/(total_length)
if(ratio_of_unique_values > 0.2){
return(TRUE)
}
else{
return(FALSE)
}
})
return(unlist(res))
}
is_likely_factor(design_mat)
is_likely_factor <- function(datafm)
{
res <- lapply(datafm, FUN = function(i){
total_levels <- levels(as.factor(as.character(i)))
total_length <- length(unlist(i))
ratio_of_unique_values <- (total_length - length(total_levels))/(total_length)
if(ratio_of_unique_values > 0.2){
return(TRUE)
}
else{
return(FALSE)
}
})
return(unlist(res))
}
auto_encode(X, method = "means")
auto_encode(design_mat, method = "means")
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat, method = "means")
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat, method = "means")
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat, method = "means")
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat, method = "means")
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat, method = "means")
test <- auto_encode(design_mat, method = "means")
lapply(test[[1]], match, table = test[[2]])
lapply(test[[1]], FUN = function(i){match(i,table = test[[2]]))})
lapply(test[[1]], FUN = function(i){match(i,table = test[[2]])})
match(test[[1]], table = test[[2]])
test <- auto_encode(design_mat, method = "mean")
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
test <- auto_encode(design_mat, method = "mean")
View(test)
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
test <- auto_encode(design_mat, method = "mean")
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
test <- auto_encode(design_mat, method = "mean")
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
test <- auto_encode(design_mat, method = "mean")
View(test)
test <- auto_encode(design_mat, method = "lowrank")
View(test)
usethis::use_test()
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
test <- auto_encode(design_mat, method = "mean")
View(test)
test <- auto_encode(design_mat, method = "means")
View(test)
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
test <- auto_encode(design_mat, method = "means")
test <- auto_encode(design_mat, method = "mean")
View(test)
source('C:/Users/juraj/git_hub/categoryEncodings/R/encodings.R')
encode_mean(design_mat, fact = 6)
see <- encode_mean(design_mat, fact = 6)
View(see)
see <- encode_mnl(design_mat, fact = 6)
View(see)
source('C:/Users/juraj/git_hub/categoryEncodings/R/encodings.R')
source('C:/Users/juraj/git_hub/categoryEncodings/R/encodings.R')
see <- encode_mnl(design_mat, fact = 6)
View(see)
source('C:/Users/juraj/git_hub/categoryEncodings/R/encodings.R')
see <- encode_mnl(design_mat, fact = 6)
View(see)
see <- encode_mead(design_mat, fact = 6)
see <- encode_mean(design_mat, fact = 6)
View(see)
1:2
design_mat_1 <- cbind( data.frame(matrix(rnorm(5*100),ncol = 5)),
sample(sample(letters, 10), 100, replace = TRUE))
colnames(design_mat_1)[6] <- "factor_var"
design_mat_2 <- cbind( design_mat_1,
sample(sample(letters, 20), 100, replace = TRUE))
colnames(design_mat_2)[7] <- c("few_letters","many_letters")
design_mat_3 <- cbind( design_mat_2,
sample(sample(1:10, 5), 100, replace = TRUE))
colnames(design_mat_3)[8] <- c("few_letters","many_letters","some_numbers")
design_mat_4 <- cbind( design_mat_3,
sample(sample(1:50, 35), 100, replace = TRUE ))
colnames(design_mat_4)[9] <- c("many_numbers")
design_mat_4 <- cbind( design_mat_4,
sample(1:2, 100, replace = TRUE ))
colnames(design_mat_4)[10] <- c("binary")
design_mat_1 <- cbind( data.frame(matrix(rnorm(5*100),ncol = 5)),
sample(sample(letters, 10), 100, replace = TRUE))
colnames(design_mat_1)[6] <- "few_letters"
design_mat_2 <- cbind( design_mat_1,
sample(sample(letters, 20), 100, replace = TRUE))
colnames(design_mat_2)[7] <- "many_letters"
design_mat_3 <- cbind( design_mat_2,
sample(sample(1:10, 5), 100, replace = TRUE))
colnames(design_mat_3)[8] <- "some_numbers"
design_mat_4 <- cbind( design_mat_3,
sample(sample(1:50, 35), 100, replace = TRUE ))
colnames(design_mat_4)[9] <- "many_numbers"
design_mat_4 <- cbind( design_mat_4,
sample(1:2, 100, replace = TRUE ))
colnames(design_mat_4)[10] <- "binary"
View(design_mat_4)
auto_encode(X, method = "mean")
auto_encode(design_mat_4, method = "mean")
encode_mean(design_mat_4, fact = "some_numbers")
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat_1)
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat_1)
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat_1)
design_mat_1[,"few_letters"]
design_mat_1[,-"few_letters"]
design_mat_1[,-("few_letters")]
design_mat_1[,-c("few_letters")]
design_mat_1[,!("few_letters")]
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat_1)
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat_1)
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat_1)
grep(pattern = "some_word", x = colnames(design_mat_4))
grep(pattern = "many", x = colnames(design_mat_4))
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat_1)
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat_1)
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat_1)
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat_1)
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat_1)
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat_1)
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat_1)
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat_1)
source('C:/Users/juraj/git_hub/categoryEncodings/R/auto_encode.R')
auto_encode(design_mat_1)
